{"version":3,"sources":["PolymorphicAsArrayDemos.tsx","GitHubIconLink.tsx","App.tsx","index.tsx"],"names":["ButtonBase","styled","padding","border","borderRadius","display","margin","BoldButton","fontWeight","borderWidth","GreenButton","backgroundColor","RedButton","ButtonDemo","Alert","React","as","alertText","props","ref","handleClick","window","alert","As","passThroughAsProp","polymorphicAsArrayUtil","onClick","polymorphicAsArray","displayName","RedAlert","createPolymorphic","AlertDemo","Form","SubmitButton","type","children","TextInput","width","outline","FormContainer","FormDemo","onSubmit","e","preventDefault","Text","fontFamily","letterSpacing","H1","fontSize","H2","Paragraph","textIndent","TextContainer","TextDemo","TopOfPageButton","textDecoration","href","TopOfPageContainer","marginTop","TopOfPageDemo","GitHubIconLink","newWindow","title","A","aria-label","target","undefined","rel","style","color","height","hoverStyle","borderColor","activeStyle","focusFromKeyStyle","boxShadow","transform","AppContainer","maxWidth","HeaderContainer","justifyContent","marginBottom","marginRight","DemoContainer","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a199f324.chunk.js","sourcesContent":["import * as React from 'react';\nimport {\n  polymorphicAsArrayUtil,\n  createPolymorphic,\n  styled,\n} from 'polymorphic-as';\nimport type {\n  PolymorphicAsArrayForwardRefComponent,\n  PolymorphicAsArrayProps,\n} from 'polymorphic-as';\n\n//////////////////////////////////////////\n// button demo\n\nconst ButtonBase = styled('button', {\n  padding: '10px 20px',\n  border: '1px solid',\n  borderRadius: '1000px',\n  display: 'block',\n  margin: '20px 0 0',\n});\n\nconst BoldButton = styled(ButtonBase, {\n  fontWeight: 'bold',\n  borderWidth: '2px',\n});\n\nconst GreenButton = styled(ButtonBase, { backgroundColor: 'hsl(120,60%,60%)' });\n\nconst RedButton = styled(ButtonBase, { backgroundColor: 'hsl(0,100%,70%)' });\n\nexport const ButtonDemo = () => (\n  <>\n    <ButtonBase>Button Base</ButtonBase>\n    <BoldButton>Bold Button</BoldButton>\n    <GreenButton>Green Button</GreenButton>\n  </>\n);\n\n//////////////////////////////////////////\n// alert demo\n\ninterface AlertProps extends PolymorphicAsArrayProps {\n  children?: React.ReactNode;\n  alertText?: string;\n}\nconst Alert: PolymorphicAsArrayForwardRefComponent<AlertProps> = React.forwardRef(\n  ({ as = 'button', alertText, ...props }, ref) => {\n    const handleClick = React.useCallback(() => {\n      window.alert(alertText);\n    }, [alertText]);\n\n    const { As, passThroughAsProp } = polymorphicAsArrayUtil({ as });\n\n    return (\n      <As {...props} onClick={handleClick} as={passThroughAsProp} ref={ref} />\n    );\n  },\n);\nAlert.polymorphicAsArray = true;\nAlert.displayName = 'Alert';\n\n// could also use the styled function here instead of the createPolymorphic function\nconst RedAlert = createPolymorphic([Alert, RedButton], {\n  alertText: 'RED ALERT!!!', // default prop\n});\n// the above is equivalent to the following:\n// const RedAlert = React.forwardRef<HTMLButtonElement, any>(\n//   ({ alertText = 'RED ALERT!!!', as, ...props }, ref) => (\n//     <Alert\n//       {...props}\n//       as={[RedButton, as].flat().filter((el) => el)}\n//       alertText={alertText}\n//       ref={ref}\n//     />\n//   ),\n// );\n// // @ts-ignore\n// RedAlert.polymorphicAsArray = true;\n\nexport const AlertDemo = () => (\n  <>\n    <RedAlert>Alert</RedAlert>\n  </>\n);\n\n//////////////////////////////////////////\n// form demo\n\nconst Form = styled('form', {\n  display: 'inline-block',\n  padding: '20px',\n  border: '1px solid',\n  borderRadius: '8px',\n});\n\n// could also use the styled function here instead of the createPolymorphic function\nconst SubmitButton = createPolymorphic([BoldButton, GreenButton], {\n  type: 'submit',\n  children: 'Submit',\n});\n\nconst TextInput = styled(\n  'input',\n  {\n    border: '2px solid',\n    borderRadius: '4px',\n    padding: '4px 8px',\n    width: '200px',\n    outline: 'none',\n  },\n  { type: 'text' },\n);\n\nconst FormContainer = styled('div', {\n  margin: '40px 0',\n});\n\nexport const FormDemo = () => (\n  <FormContainer>\n    <Form onSubmit={(e: any) => e.preventDefault()}>\n      <TextInput />\n      <Alert as={SubmitButton} alertText=\"You clicked submit! ⚡️💨\" />\n    </Form>\n  </FormContainer>\n);\n\n//////////////////////////////////////////\n// text demo\n\nconst Text = styled('span', {\n  fontFamily: 'American Typewriter',\n  letterSpacing: '0.5px',\n});\n\nconst H1 = styled([Text, 'h1'], {\n  fontSize: '26px',\n  margin: '20px 0',\n});\n\nconst H2 = styled([Text, 'h2'], {\n  fontSize: '22px',\n  margin: '15px 0',\n});\n\nconst Paragraph = styled([Text, 'p'], {\n  textIndent: '25px',\n  margin: '15px 0',\n});\n\nconst TextContainer = styled('div', {\n  margin: '20px 0',\n});\n\nexport const TextDemo = () => (\n  <TextContainer>\n    <H1>H1 Heading</H1>\n    <H2>H2 Heading</H2>\n\n    <Paragraph>\n      Paragraph... the quick brown fox jumps over the lazy dog. The quick brown\n      fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n      The quick brown fox jumps over the lazy dog.\n    </Paragraph>\n  </TextContainer>\n);\n\n//////////////////////////////////////////\n// top of page ButtonLink demo\n\nconst TopOfPageButton = styled(\n  [ButtonBase, 'a'],\n  {\n    padding: '7px 12px',\n    textDecoration: 'none',\n    display: 'inline',\n  },\n  { href: '#top', children: 'Top of Page 👆' },\n);\n\nconst TopOfPageContainer = styled('div', {\n  marginTop: '100px',\n});\n\nexport const TopOfPageDemo = () => (\n  <TopOfPageContainer>\n    <TopOfPageButton />\n  </TopOfPageContainer>\n);\n\n//////////////////////////////////////////\n","import * as React from 'react';\nimport { Interactive } from 'react-interactive';\nimport { GitHubLogoIcon } from '@radix-ui/react-icons';\n\ninterface GitHubIconLinkProps {\n  href?: string;\n  title?: string;\n  newWindow?: boolean;\n}\n\nexport const GitHubIconLink: React.VFC<GitHubIconLinkProps> = ({\n  newWindow = true,\n  title,\n  ...props\n}) => (\n  <Interactive.A\n    {...props}\n    title={title}\n    aria-label={title}\n    target={newWindow ? '_blank' : undefined}\n    rel={newWindow ? 'noopener noreferrer' : undefined}\n    style={{\n      color: 'black',\n      outline: 'none',\n      display: 'inline-block',\n      width: '36px',\n      height: '36px',\n      padding: '3px',\n      margin: '-3px',\n      borderRadius: '50%',\n    }}\n    hoverStyle={{\n      color: 'hsl(120,100%,33%)',\n      borderColor: 'hsl(120,100%,33%)',\n    }}\n    activeStyle={{\n      color: 'hsl(120,100%,33%)',\n      borderColor: 'hsl(120,100%,33%)',\n    }}\n    focusFromKeyStyle={{\n      boxShadow: '0 0 0 2px hsl(270,85%,60%)',\n    }}\n  >\n    <GitHubLogoIcon\n      width=\"30\"\n      height=\"30\"\n      // scale up the svg icon because it doesn't fill the view box\n      // see: https://github.com/radix-ui/icons/issues/73\n      style={{ transform: 'scale(1.1278)' }}\n    />\n  </Interactive.A>\n);\n","import {\n  ButtonDemo,\n  AlertDemo,\n  FormDemo,\n  TextDemo,\n  TopOfPageDemo,\n} from './PolymorphicAsArrayDemos';\nimport { GitHubIconLink } from './GitHubIconLink';\nimport { styled } from 'polymorphic-as';\n\nconst AppContainer = styled('div', {\n  maxWidth: '600px',\n  padding: '12px 15px 25px',\n  margin: '0 auto',\n});\n\nconst HeaderContainer = styled('header', {\n  display: 'flex',\n  justifyContent: 'space-between',\n  marginBottom: '18px',\n});\n\nconst H1 = styled('h1', {\n  fontSize: '26px',\n  marginRight: '16px',\n});\n\nconst DemoContainer = styled('div', {\n  margin: '30px 0',\n});\n\nexport const App = () => {\n  return (\n    <AppContainer>\n      <HeaderContainer>\n        <H1>\n          Polymorphic <code>as</code> array API Demo\n        </H1>\n        <GitHubIconLink\n          title=\"GitHub repository for polymorphic as prop api proof of concept\"\n          href=\"https://github.com/rafgraph/polymorphic-as-prop-api\"\n        />\n      </HeaderContainer>\n      <DemoContainer>\n        <ButtonDemo />\n        <AlertDemo />\n        <FormDemo />\n        <TextDemo />\n        <TopOfPageDemo />\n      </DemoContainer>\n    </AppContainer>\n  );\n};\n","import { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport './index.css';\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}